<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css" />
        <style>
            html,
            body {
                background-color: black;
                color: white;
                width: 800px;
            }

            .wrapper > * {
                margin: 5px;
                box-shadow: 0 0 5px #fff;
                width: 790px;
                border-radius: 5px;
                overflow: hidden;
            }

            img {
                width: auto;
                vertical-align: middle;
            }

            p {
                margin: 0;
            }

            .player {
                display: flex;
                position: relative;
                height: 128px;
            }

            .player .avatar {
                width: 128px;
                height: 128px;
                position: absolute;
            }

            .player .avatar img {
                width: 100%;
                border-radius: 5px;
            }

            .player .name {
                font-size: 24px;
            }

            .player .info {
                width: 100%;
                display: flex;
                flex-direction: column;
                align-items: center;
                /* line-height: 2; */
                justify-content: space-around;
            }

            .player .info .guild.Copper {
                color: #b4775f;
            }
            .player .info .guild.Silver {
                color: #9a9593;
            }
            .player .info .guild.Gold {
                color: #bda97f;
            }
            .player .info .guild.Diamond {
                color: #a5cbcf;
            }

            .player .info p > span:not(:last-child) {
                margin-right: 20px;
            }

            .player .info .matches span.win {
                color: #006400;
            }
            .player .info .matches span.lose {
                color: #8b0000;
            }

            .player .info .matches span.victory {
                color: lightgreen;
            }
            .player .info .matches span.stomp {
                color: green;
                /* font-size: 8px; */
            }
            .player .info .matches span.fail {
                color: #ff6961;
            }
            .player .info .matches span.stomped {
                color: red;
                /* font-size: 8px; */
            }

            .player .rank {
                width: 64px;
                height: 64px;
                flex-grow: 1;
                position: absolute;
                top: 0;
                right: 0;
            }

            .player .rank .medal {
                z-index: 1;
            }

            .player .rank .star {
                z-index: 2;
            }

            .player .rank p {
                z-index: 4;
            }

            .player .rank div {
                height: 100%;
                width: 100%;
                top: 0;
                right: 0;
                position: absolute;
            }

            .player .rank img {
                top: 0;
                right: 0;
                position: absolute;
                height: 64px;
            }

            .player .rank p {
                font-size: 12px;
                line-height: 1;
                position: absolute;
                text-align: center;
                width: 64px;
                bottom: 4px;
                right: 0;
                /* background-color: #222; */
                /* border: black 1px solid; */
                box-sizing: border-box;
                text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000; /* 描边效果 */
            }

            .hero_winrate > *:not(:last-child) {
                /* margin-bottom: 10px; */
            }

            .hero_winrate .heroes {
                display: grid;
                /* line-height: 2; */
                grid-template-columns: 32px auto auto auto auto auto;
                /* grid-template-rows: repeat(auto-fill, 1fr); */
                justify-content: start;
                align-items: center;
            }

            .hero_winrate .heroes .hero {
                width: 100%;
                display: flex;
                align-items: center;
            }

            .hero_winrate .heroes img {
                width: 100%;
                /* height: 32px; */
                border-radius: 6px;
                overflow: hidden;
            }

            .hero_winrate .heroes span.imp {
                margin: 0 4px;
            }

            .hero_winrate .heroes span {
                text-align: center;
            }

            .hero_winrate .heroes .tip.row {
                grid-column: 1/-1;
            }

            .hero_winrate .heroes .win {
                /* color: #000; */
                text-align: right;
                padding-right: 8px;
                background-color: #006400;
                border-radius: 16px 0 0 16px;
                height: 16px;
                justify-self: end;
            }
            .hero_winrate .heroes .lose {
                /* color: #000; */
                text-align: left;
                padding-left: 8px;
                background-color: #8b0000;
                border-radius: 0 16px 16px 0;
                height: 16px;
                justify-self: start;
            }

            .matches {
                table-layout: fixed;
            }

            .matches .match.win {
                background-color: #006400;
            }
            .matches .match.lose {
                background-color: #8b0000;
            }

            .matches .match td {
                text-align: center;
                /* line-height: 40px; */
                height: 40px;
                overflow: hidden;
            }

            .matches .match .player_lane {
                width: 100%;
                height: 100%;
                justify-content: center; /* 水平居中 */
                align-items: center; /* 垂直居中 */
                display: flex;
            }

            .matches .match .player_lane:not(.tie) {
                /* background-color: #000; */
            }

            .matches .match .player_lane svg {
                width: 36px;
                height: 36px;
            }
            .player_lane.victory svg path {
                fill: lightgreen;
            }

            .player_lane.stomp svg path {
                fill: green;
            }

            .player_lane.stomped svg path {
                fill: red;
            }

            .plus {
                display: grid;
                grid-template-columns: repeat(4, 1fr);
                gap: 10px;
            }

            .plus .hero {
                width: 190px;
                height: 190px;
                border-radius: 5px;
                position: relative;
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                grid-template-rows: 118.75px auto;
                justify-items: center;
                align-items: center;
            }
            .plus .hero img {
                width: 100%;
                grid-column: 1/-1;
            }

            .plus .level {
                position: absolute;
                width: 50px;
                height: 50px;
                left: calc(50% - 25px);
                top: calc(118.75px - 25px);
            }

            .plus .level span {
                position: absolute;
                width: 100%;
                text-align: center;
                left: 0;
                bottom: 18px;
                font-size: 14px;
                text-shadow: -1px -1px 1px #000, 1px -1px 1px #000, -1px 1px 1px #000, 1px 1px 1px #000;
            }
        </style>
    </head>
    <body>
    <%  const player = data;
        const guildLevel = (percent) => {
            if (percent <= 25) {
                return "Copper";
            } else if (percent <= 50) {
                return "Silver";
            } else if (percent <= 75) {
                return "Gold";
            } else {
                return "Diamond";
            }
        };
        const laneSVG = {
            stomp: `<svg viewBox="0 0 24 24" class="hitagi__sc-1apuy4g-0 hmhZOG"><path d="M8.05731 22.3674L9.60454 22.8002L11.5974 21.6551L12.043 20.0773L13.5902 20.51L15.583 19.3649L16.0287 17.7871L17.5759 18.2199L19.5687 17.0748L20.0143 15.4969L21.5615 15.9297L23.5544 14.7846L24 13.2068L23.4492 12.2014L7.50651 21.3621L8.05731 22.3674ZM12.1328 3.50265L11.0312 1.49196C10.8798 1.21549 10.5316 1.11811 10.2576 1.27556L0.29345 7.00098C0.0194354 7.15843 -0.0808273 7.51346 0.0706444 7.78993L1.44766 10.3033L11.91 4.29159C12.184 4.13414 12.2843 3.77912 12.1328 3.50265ZM18.3935 8.4063L14.1658 9.60458L12.4221 10.6065C12.2851 10.6853 12.111 10.6366 12.0353 10.4983L11.7599 9.99565C11.6842 9.85742 11.7343 9.6799 11.8713 9.60118L13.615 8.59924L13.0642 7.59389L11.3205 8.59584C11.1835 8.67456 11.0094 8.62587 10.9337 8.48765L10.6583 7.98497C10.5826 7.84673 10.6327 7.66922 10.7697 7.5905L12.5134 6.58855L11.9626 5.58321L1.99846 11.3086L6.9557 20.3567L22.8984 11.196L22.2615 10.0336C21.5024 8.64813 19.9073 7.97847 18.3935 8.4063Z"></path></svg>`,
            victory: `<svg viewBox="0 0 512 512"><path d="M198.844 64.75c-.985 0-1.974.03-2.97.094-15.915 1.015-32.046 11.534-37.78 26.937-34.072 91.532-51.085 128.865-61.5 222.876 14.633 13.49 31.63 26.45 50.25 38.125l66.406-196.467 17.688 5.968L163.28 362.5c19.51 10.877 40.43 20.234 62 27.28l75.407-201.53 17.5 6.53-74.937 200.282c19.454 5.096 39.205 8.2 58.78 8.875L381.345 225.5l17.094 7.594-75.875 170.656c21.82-1.237 43.205-5.768 63.437-14.28 43.317-53.844 72.633-109.784 84.5-172.69 5.092-26.992-14.762-53.124-54.22-54.81l-6.155-.282-2.188-5.75c-8.45-22.388-19.75-30.093-31.5-32.47-11.75-2.376-25.267 1.535-35.468 7.376l-13.064 7.47-.906-15c-.99-16.396-10.343-29.597-24.313-35.626-13.97-6.03-33.064-5.232-54.812 9.906l-10.438 7.25-3.812-12.125c-6.517-20.766-20.007-27.985-34.78-27.97zM103.28 188.344C71.143 233.448 47.728 299.56 51.407 359.656c27.54 21.84 54.61 33.693 80.063 35.438 14.155.97 27.94-1.085 41.405-6.438-35.445-17.235-67.36-39.533-92.594-63.53l-3.343-3.157.5-4.595c5.794-54.638 13.946-91.5 25.844-129.03z"/></svg>`,
            fail: `<svg viewBox="0 0 36 36"><path fill="#ff6961" d="M36 32a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4h28a4 4 0 0 1 4 4v28z"></path><circle fill="#FFF" cx="27" cy="7" r="3"></circle><path fill="#FFF" d="M13.06 13.06l2.367-2.366l3.859 1.158l-2.635 2.847a10.018 10.018 0 0 1 4.392 3.379l5.017-5.017a1.5 1.5 0 0 0-.63-2.497l-9.999-3a1.495 1.495 0 0 0-1.492.376l-3 3a1.5 1.5 0 1 0 2.121 2.12zm16.065 4.949a1.496 1.496 0 0 0-1.262-.503l-6.786.617a9.966 9.966 0 0 1 1.464 2.879l3.548-.322l-1.554 6.995a1.499 1.499 0 1 0 2.928.65l2-9a1.5 1.5 0 0 0-.338-1.316zM13 16a8 8 0 1 0 0 16a8 8 0 0 0 0-16zm0 14a6 6 0 1 1 .002-12.002A6 6 0 0 1 13 30z"></path></svg>`,
            stomped: `<svg viewBox="-1 0 19 19"><path d="M16.417 9.579A7.917 7.917 0 1 1 8.5 1.662a7.917 7.917 0 0 1 7.917 7.917zm-2.458 2.96a.396.396 0 0 0-.396-.397h-.667a1.527 1.527 0 0 0-1.249-1.114.777.777 0 0 0 .014-.145V9.378a.794.794 0 0 0-.792-.792H8.201a2.984 2.984 0 0 0-1.682-.516l-.11.002V7.42h2.997a.396.396 0 1 0 0-.792H6.41v-1.3a.396.396 0 0 0-.396-.397H4.891a.396.396 0 0 0 0 .792h.727V8.21a2.997 2.997 0 1 0 3.836 3.466h.71a1.526 1.526 0 1 0 2.732 1.26h.667a.396.396 0 0 0 .396-.397zM8.078 9.507a2.205 2.205 0 1 1-1.559-.646 2.19 2.19 0 0 1 1.559.646zm4.078 3.03a.734.734 0 1 1-.733-.734.735.735 0 0 1 .733.733z"/></svg>`,
            tie: `<svg fill="#fff" viewBox="0 0 512.001 512.001"><g><g><path d="M120.988,239.868c-4.496,10.625-5.122,20.183-5.157,20.811c-0.267,4.607,3.243,8.547,7.849,8.829 c4.618,0.29,8.574-3.228,8.873-7.833c0.265-4.771,2.339-13.092,5.884-19.44C137.421,242.113,141.397,242.649,120.988,239.868z"/></g></g><g><g><path d="M391.178,255.418c-0.211,8.054-2.458,17.62-6.74,28.398c-1.708,4.299,0.393,9.168,4.692,10.875 c4.293,1.708,9.167-0.39,10.875-4.692c5.103-12.842,7.74-24.392,7.943-34.581H391.178z"/></g></g><g><g><path d="M164.769,210.51c1.046,3.339,1.397,6.953,0.893,10.65c-0.293,2.146-0.857,4.188-1.648,6.1c0,0,51.266,3.416,198.065,3.949 c-0.086-6.331,2.19-12.199,6.244-16.732C217.627,214.046,164.769,210.51,164.769,210.51z"/></g></g><g><g><circle cx="37.179" cy="128.669" r="29.491"/></g></g><g><g><path d="M510.146,391.511l-37.916-66.985c14.35-49.173,20.678-68.137,20.678-68.137l8.949-67.014 c1.502-10.977-6.248-21.075-17.235-22.468l-18.183-2.305c-10.984-1.393-20.996,6.445-22.293,17.431l-1.884,15.955l28.718-21.317 l-37.91,42.278h-46.432c-6.571,0-11.898,5.328-11.898,11.898c0,6.57,5.328,11.898,11.898,11.898h51.744 c3.381,0,6.601-1.438,8.859-3.956l41.456-46.234l-32.023,54.694c-5.28,9.018-14.374,8.169-18.293,8.167c-1.959,0-3.31,0-5.295,0 c-0.399,0.898,3.152-7.399-24.44,57.181c-0.548,1.284-0.907,2.642-1.06,4.031l-8.934,80.338 c-0.939,8.447,5.667,15.857,14.208,15.857c7.179,0,13.361-5.401,14.172-12.701l8.702-78.244l21.512-50.353l-14.121,50.463 c-1.158,3.756-0.718,7.823,1.218,11.243l40.949,72.345c3.885,6.864,12.596,9.276,19.459,5.392 C511.615,407.085,514.03,398.373,510.146,391.511z"/></g></g><g><g><circle cx="464.865" cy="128.702" r="29.491"/></g></g><g><g><path d="M142.923,206.051l-59.556-8.118l-39.135-18.451l13.626,2.292c-1.422-10.945-11.411-18.577-22.254-17.202l-18.182,2.305 C6.43,168.271-1.315,178.374,0.186,189.345l9.12,68.689l21.865,70.857l5.829,70.795c0.646,7.848,7.527,13.705,15.401,13.057 c7.859-0.647,13.705-7.542,13.058-15.401l-5.956-72.345c-0.084-1.031-0.281-2.05-0.585-3.039l-14.123-50.463l21.514,50.353 l8.702,78.244c0.873,7.86,7.96,13.486,15.768,12.612c7.838-0.871,13.483-7.931,12.612-15.768l-8.934-80.338 c-0.154-1.388-0.511-2.747-1.06-4.032l-27.336-61.43l-2.945-24.951l-29.029-25.179l40.79,19.231 c1.097,0.517,2.266,0.862,3.468,1.027l61.369,8.365c6.521,0.887,12.509-3.68,13.396-10.183 C153.994,212.936,149.435,206.939,142.923,206.051z"/></g></g></svg>`,
        };
        const outcomeCounts = {
            victory: 0,
            stomp: 0,
            fail: 0,
            stomped: 0,
            tie: 0,
        };
        const processLaneOutcome = (outcome) => {
            switch (outcome) {
                case "RADIANT_VICTORY":
                    return { radiant: "victory", dire: "fail" };
                case "RADIANT_STOMP":
                    return { radiant: "stomp", dire: "stomped" };
                case "DIRE_VICTORY":
                    return { radiant: "fail", dire: "victory" };
                case "DIRE_STOMP":
                    return { radiant: "stomped", dire: "stomp" };
                default:
                    return { radiant: "tie", dire: "tie" };
            }
        };
        let nearMatchCount = 25,
            nearWinCount = 0,
            streak = 0;
        player.matches.forEach((match) => {
            const innerPlayer = match.players.find(innerPlayer=>player.steamAccount.id==innerPlayer.steamAccount.id);
            nearWinCount += match.didRadiantWin == innerPlayer.isRadiant ? 1 : 0;
            const didWin = match.didRadiantWin === innerPlayer.isRadiant;
            if (!player.streak) {
                if (streak != 0) {
                    if (didWin && streak > 0) streak++;
                    else if (!didWin && streak < 0) streak--;
                    else player.streak = streak;
                } else streak = didWin ? 1 : -1;
            }

            const laneResult = {
                top: processLaneOutcome(match.topLaneOutcome),
                mid: processLaneOutcome(match.midLaneOutcome),
                bottom: processLaneOutcome(match.bottomLaneOutcome),
            };

            let laneKey = "mid"; // 默认中路
            if (innerPlayer.lane === "SAFE_LANE") {
                laneKey = innerPlayer.isRadiant ? "bottom" : "top";
            } else if (innerPlayer.lane === "OFF_LANE") {
                laneKey = innerPlayer.isRadiant ? "top" : "bottom";
            }

            match.laneResult = laneResult[laneKey][innerPlayer.isRadiant ? "radiant" : "dire"];
            if (match.laneResult in outcomeCounts) {
                outcomeCounts[match.laneResult]++;
            }
        }); 
        // 无法动态获取tip元素个数
        // const heroesCountPixels = 800 - ($(".tip:not(.row):not(.win_count):not(.lose_count)").length + 1) * 40;
        const heroesCountPixels = 800 - (4+1) * 40;
        const highestCountsTotal = {
            winCount: Math.max(...player.heroesPerformanceTop10.map((hero) => hero.winCount)),
            loseCount: Math.max(...player.heroesPerformanceTop10.map((hero) => hero.matchCount - hero.winCount)),
        };
        const pixelOfPerMatchInTotal = heroesCountPixels / (highestCountsTotal.winCount + highestCountsTotal.loseCount);
        const highestCountsNear = {
            winCount: Math.max(...player.heroesPerformance?.filter((hero) => hero.matchCount > 1)?.map((hero) => hero.winCount)),
            loseCount: Math.max(...player.heroesPerformance?.filter((hero) => hero.matchCount > 1)?.map((hero) => hero.matchCount - hero.winCount)),
        };
        const nearAdjustmentFactor = Math.min(highestCountsTotal.winCount / (highestCountsTotal.winCount + highestCountsTotal.loseCount), highestCountsTotal.loseCount / (highestCountsTotal.winCount + highestCountsTotal.loseCount));

        const pixelOfPerMatchInNear = (heroesCountPixels / (highestCountsNear?.winCount + highestCountsNear?.loseCount ?? 1)) * nearAdjustmentFactor;
        
        player.positionPerformance=[];
        // 瞎j8定义的各位置代表物品，以后看情况调整
        const positionIcons = ["damage","nuke","armor","speed","healing"];
        for (let index = 0; index < 5; index++) {
            let currentPositionMatches = player.matches.filter(match=>match.players.find(innerPlayer=>player.steamAccount.id==innerPlayer.steamAccount.id).position == ("POSITION_"+(index+1)))
            let winCount = currentPositionMatches.filter(match=>match.didRadiantWin == match.players.find(innerPlayer=>player.steamAccount.id==innerPlayer.steamAccount.id).isRadiant).length;
            player.positionPerformance.push({
                position : (index + 1),
                icon : positionIcons[index],
                matchCount : currentPositionMatches.length,
                winCount : winCount,
                loseCount : currentPositionMatches.length - winCount,
                imp : currentPositionMatches.length>0? Math.round(currentPositionMatches.reduce((acc,match)=>acc+match.players.find(innerPlayer=>player.steamAccount.id==innerPlayer.steamAccount.id).imp,0)/currentPositionMatches.length):"-"
            })
        }
        const highestCountsPosition = {
            winCount: Math.max(...player.positionPerformance.filter((position) => position.matchCount > 1)?.map((position) => position.winCount)),
            loseCount: Math.max(...player.positionPerformance.filter((position) => position.matchCount > 1)?.map((position) => position.matchCount - position.winCount)),
        };
        const pixelOfPerMatchInPosition = (heroesCountPixels / (highestCountsPosition.winCount + highestCountsPosition.loseCount ?? 1)) * nearAdjustmentFactor;
        %>

        <div class="wrapper">
            <div class="player">
                <%- `
                <div class="avatar"><img src="${player.steamAccount?.avatar}" alt="" /></div>
                <div class="info">
                    <p class="name">${player.steamAccount.name}${player.guildMember ? ` <span class="guild ${guildLevel(player.guildMember.guild.currentPercentile)}">[${player.guildMember.guild.tag}]</span>${player.genHero?` >${player.genHero.names_cn[0]}<`:""}</p>` : ""}
                    <p class="matches"><span>场次：${player.matchCount}（<span class="win">${player.winCount}</span>/<span class="lose">${player.matchCount - player.winCount}</span>）</span>胜率：<span style="color:${utils.winRateColor(player.winCount / player.matchCount)};">${((player.winCount / player.matchCount) * 100).toFixed(2)}%</span></p>
                    <p class="matches"><span>最近25场：<span class="win">${nearWinCount}</span>/<span class="lose">${nearMatchCount - nearWinCount}</span></span><span>胜率：<span style="color:${utils.winRateColor(nearWinCount / nearMatchCount)};">${(
                    (nearWinCount / nearMatchCount) * 100).toFixed(2)}%</span></span><span>评分：${(player.performance.imp > 0 ? "+" : "") + player.performance.imp}</span></span></p>
                    <p class="matches"><span>对线：<span class="victory">${outcomeCounts.victory + outcomeCounts.stomp}(<span class="stomp">${outcomeCounts.stomp}</span>)</span>-<span class="tie">${outcomeCounts.tie}</span>-<span class="fail">${
                    outcomeCounts.fail + outcomeCounts.stomped
                }(<span class="stomped">${outcomeCounts.stomped}</span>)</span></span><span>线优：<span style="color:${utils.winRateColor(
                    (outcomeCounts.victory + outcomeCounts.stomp + outcomeCounts.tie / 2) / (outcomeCounts.victory + outcomeCounts.stomp + outcomeCounts.tie + outcomeCounts.fail + outcomeCounts.stomped)
                )};">${(((outcomeCounts.victory + outcomeCounts.stomp) / (outcomeCounts.victory + outcomeCounts.stomp + outcomeCounts.fail + outcomeCounts.stomped)) * 100).toFixed(2)}%</span></span></p>
                </div>
                <div class="rank">
                    <img class="medal" src="${utils.getImageUrl('medal_' +(player.inTop100??player.rank.medal))}" alt="" />
                    <img class="star" src="${utils.getImageUrl('star_' + player.rank.star)}" alt="" />
                    <p>${player.steamAccount.seasonLeaderboardRank ?? ""}</p>    
                </div>` %>
            </div>
            <div class="hero_winrate">
                <div class="heroes">
                    <%- !player.genHero ?
                    `<p class="tip row total">全期场次前十的英雄：</p>`:
                    `<p class="tip row total">全期场次：</p>`
                    %>
                    <span class="tip">英雄</span>
                    <span class="tip" style="margin: 0 4px">场次</span>
                    <span class="tip" style="margin: 0 4px">胜率</span>
                    <span class="tip" style="margin: 0 4px">表现</span>
                    <span class="tip win_count" style="justify-self: end; margin-right: 2px">胜场</span>
                    <span class="tip lose_count" style="justify-self: start; margin-left: 2px">败场</span>
                    <%- player.heroesPerformanceTop10
                    .map((hero) => `
                    <span><img alt="" src="${utils.getImageUrl(hero.hero.shortName, ImageType.HeroIcons)}" /></span>
                    <span class="count">${hero.matchCount}</span>
                    <span class="win_rate">${((hero.winCount / hero.matchCount) * 100).toFixed(0)}%</span>
                    <span class="imp">${(hero.imp > 0 ? "+" : "") + hero.imp}</span>
                    <span class="win" style="${hero.winCount == 0 ? "visibility:hidden;" : ""}width: ${hero.winCount * pixelOfPerMatchInTotal}px">${hero.winCount}</span>
                    <span class="lose" style="${hero.matchCount - hero.winCount == 0 ? "visibility:hidden;" : ""}width: ${(hero.matchCount - hero.winCount) * pixelOfPerMatchInTotal}px">${hero.matchCount - hero.winCount}</span>`).join("") %>
                    <%- !player.genHero ?
                    `<p class="tip row near">近期使用场次大于1的英雄：</p>`:
                    `<p class="tip row total">近25场：</p>`
                    %>
                    <%- player.heroesPerformance
                    .filter((hero) => hero.matchCount > 1)
                    .map((hero, index) => `
                    <span><img alt="" src="${utils.getImageUrl(hero.hero.shortName, ImageType.HeroIcons)}" /></span>
                    <span class="count">${hero.matchCount}</span>
                    <span class="win_rate">${((hero.winCount / hero.matchCount) * 100).toFixed(0)}%</span>
                    <span class="imp">${(hero.imp > 0 ? "+" : "") + hero.imp}</span>
                    <span class="win" style="${hero.winCount == 0 ? "visibility:hidden;" : ""}width: ${hero.winCount * pixelOfPerMatchInNear}px">${hero.winCount}</span>
                    <span class="lose" style="${hero.matchCount - hero.winCount == 0 ? "visibility:hidden;" : ""}width: ${(hero.matchCount - hero.winCount) * pixelOfPerMatchInNear}px">${hero.matchCount - hero.winCount}</span>`).join("") %>
                    <p class="tip row near">近25场各个位置的表现：</p>
                    <span class="tip">位置</span>
                    <span class="tip" style="margin: 0 4px">场次</span>
                    <span class="tip" style="margin: 0 4px">胜率</span>
                    <span class="tip" style="margin: 0 4px">表现</span>
                    <span class="tip win_count" style="justify-self: end; margin-right: 2px">胜场</span>
                    <span class="tip lose_count" style="justify-self: start; margin-left: 2px">败场</span>
                    <%- player.positionPerformance
                    .map((position) => `
                    <span><img src="${utils.getImageUrl(position.icon,ImageType.IconsFacets)}"></span>
                    <span class="count">${position.matchCount}</span>
                    <span class="win_rate">${position.matchCount>0?(((position.winCount / position.matchCount) * 100).toFixed(0)):"-"}%</span>
                    <span class="imp">${(position.imp > 0 ? "+" : "") + position.imp}</span>
                    <span class="win" style="${position.winCount == 0 ? "visibility:hidden;" : ""}width: ${position.winCount * pixelOfPerMatchInPosition}px">${position.winCount}</span>
                    <span class="lose" style="${position.matchCount - position.winCount == 0 ? "visibility:hidden;" : ""}width: ${(position.matchCount - position.winCount) * pixelOfPerMatchInPosition}px">${position.matchCount - position.winCount}</span>`).join("") %>
                </div>
            </div>
            <%- Math.abs(player.streak)>1?`<div class="streak" style="box-shadow:none;color:${utils.winRateColor((player.streak + 10) / 20)};">${Math.abs(player.streak) + (player.streak > 0 ? "连胜" : "连败")}</div>`:"" %>
            <table class="matches">
                <colgroup>
                    <col style="width: auto" />
                    <col style="width: auto" />
                    <col style="width: 40px" />
                    <col style="width: auto" />
                    <col style="width: 40px" />
                    <col style="width: auto" />
                    <col style="width: auto" />
                    <col style="width: auto" />
                    <col style="width: 40px" />
                </colgroup>
                <thead>
                    <tr>
                        <th>编号</th>
                        <th>模式</th>
                        <th>英雄</th>
                        <th>KDA(参战率)</th>
                        <th>对线</th>
                        <th>时间</th>
                        <th>时长</th>
                        <th>表现</th>
                        <th>段位</th>
                    </tr>
                </thead>
                <tbody>
                    <%- player.matches.map((match) => {
                        const innerPlayer = match.players.find(innerPlayer => player.steamAccount.id == innerPlayer.steamAccount.id);
                        innerPlayer.teamKillsCount = match.parsedDateTime ?
                            (match[(innerPlayer.isRadiant ? "radiant" : "dire") + "Kills"]?.reduce((acc, cva) => acc + cva, 0) ?? 0) : 
                            match.players
                                .filter(p => p.isRadiant === innerPlayer.isRadiant)
                                .reduce((k, p) => k + p.kills, 0);
                        return `
                    <tr class="match ${match.didRadiantWin == innerPlayer.isRadiant ? "win" : "lose"}">
                        <td>${match.parsedDateTime ? match.id : `<p>${match.id}</p><p>（未解析）</p>`}</td>
                        <td>
                            <p>${d2a.lobbyTypes[match.lobbyType] || match.lobbyType}</p>
                            <p>${d2a.gameMode[match.gameMode] || match.gameMode}</p>
                        </td>
                        <td><img alt="" src="${utils.getImageUrl(innerPlayer.hero.shortName, ImageType.HeroIcons)}" /></td>
                        <td style="line-height: 20px">
                            <p>${((innerPlayer.kills + innerPlayer.assists) / Math.max(1, innerPlayer.deaths)).toFixed(2)} (${(match.parsedDateTime?"":"≈")+((((innerPlayer.kills + innerPlayer.assists) /
                            innerPlayer.teamKillsCount) * 100)?.toFixed(0))}%)</p>
                            <p>${innerPlayer.kills}/${innerPlayer.deaths}/${innerPlayer.assists}</p>
                        </td>
                        <td><div class="player_lane ${match.laneResult}">${laneSVG[match.laneResult]}</div></td>
                        <td style="line-height: 20px">${moment(new Date(match.startDateTime * 1000)).format("YYYY-MM-DD HH:mm:ss").slice(2)}</td>
                        <td>${utils.sec2time(match.durationSeconds)}</td>
                        <td>${innerPlayer.imp != null ? ((innerPlayer.imp >= 0 ? "+" : "") + innerPlayer.imp) : "?"}</td>
                        <td><img class="medal" src="${utils.getImageUrl("medal_" + match.rank?.toString().split("")[0])}" style="width: 100%" /></td>
                    </tr>`}).join("")%>
                </tbody>
            </table>
            <div class="plus">
                <%- player.dotaPlus.map((hero) => `
                <div class="hero">
                    <img src="${utils.getImageUrl(hero.shortName, ImageType.Heroes)}" alt="" />
                    <div class="level"><img src="${utils.getImageUrl("hero_badge_" + Math.ceil((hero.level + 1) / 6))}" alt="" /><span>${hero.level}</span></div>
                    <span>${((hero.winCount / hero.matchCount) * 100).toFixed(2)}%</span>
                    <span>${hero.matchCount}</span>
                </div>`).join("") %>
            </div>
        </div>
    </body>
</html>
