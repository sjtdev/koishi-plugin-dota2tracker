commands:
  dota2tracker:
    subscribe:
      description: After subscribing, players need to bind their Steam ID to this group.
      usage: >-
        After subscribing, players need to bind their Steam ID to this group. BOT
        will subscribe to the new game data of bound players in this group. After
        the STRATZ game analysis is completed, the game data will be generated
        into a picture battle report and published to this group.
      messages:
        subscribe_success: Subscription successful.
        subscribed: This Channel has been subscribed, no need to subscribe again.
    unsubscribe:
      description: Unsubscribe from this group.
      messages:
        unsubscribe_success: Unsubscription successful.
        not_subscribed: >-
          This Channel has not been subscribed yet, so there is no need to
          unsubscribe.
    bind:
      description: Bind your SteamID and optionally set a nickname.
      usage: Bind your SteamID to your account. If the group is subscribed, your new match data will be posted in the group in real-time.
      examples: |-
        bind 123456789
        bind 123456789 John
        bind 123456789 "John Doe"
      messages:
        steam_id_invalid: Invalid SteamID.
        bind_success: |-
          Binding successful,
          ID: {userId}
          Nickname: {nickName}
          SteamID: {steamId}
        bind_failed: Binding failed, {0}
        reason_without_match: Invalid SteamID or no matches found.
        reason_fetch_failed: Poor network conditions or other reasons prevented the verification of the SteamID. Please try again later.
        already_binded: |-
          You are already bound, no need to bind again.
          Here is your personal information:
          ID: {userId}
          Nickname: {nickName}
          SteamID: {steamId}
        nick_name_too_long: Nickname is too long, please limit it to 20 characters or less. (It can also be left blank)
        is_anonymous: |-
          Please note: Your Steam player data is not public, and you will not be able to use the main functions of the BOT, such as "battle report tracking," "query-recent-match commands," etc.
          If you need to make data public, please set it to public in the DOTA2 game settings.
    unbind:
      description: Unbind your personal information.
      messages:
        unbind_success: Unbinding successful.
        not_binded: Not bound, no need to unbind.
    rename:
      description: Change the nickname set during binding.
      examples: |-
        rename John
        rename "John Doe"
      messages:
        rename_success: Rename successful, now you are called {nick_name}.
        empty_input: Please enter your nickname.
        not_binded: Please bind first, you can set a nickname during binding.
        nick_name_too_long: Nickname is too long, please limit it to 20 characters.
        nick_name_same: The input content is the same as the original nickname and does not need to be renamed.
    query-members:
      description: Query the players bound in this group.
      messages:
        title: "Guild DOTA 2 Roster (Total: {count})"
        table_headers:
          nickname: "Nickname"
          winrate: "Win Rate (L10)"
          last_match: "Last Match"
        no_members: "No players bound in this group."
        query_failed: Failed to query group members.
    query-match:
      description: Query the match data of the specified match ID and generate a picture.
      options:
        parse: Whether to wait for match data parsing
      examples: |-
        query-match 1234567890
        query-match 1234567890 -p
        query-match 1234567890 --parse
      messages:
        empty_input: Please enter the match ID.
        match_id_invalid: Invalid match ID.
        querying_match: Searching for match details, please wait...
        query_failed: Failed to get match data.
        waiting_for_parse: Match data has not been parsed yet, a parse request has been sent to the server. The battle report will be sent once parsing is complete or times out.
    query-recent-match:
      description: Query the most recent match data and generate a picture.
      options:
        parse: Whether to wait for match data parsing
      usage: |-
        Query the most recent match data of the specified player and generate a picture.
        The parameter can be the player's SteamID or the nickname of a player bound in this group. If no parameter is provided, it will try to query the SteamID of the command caller.
      examples: |-
        query-recent-match
        query-recent-match 123456789
        query-recent-match John
        query-recent-match 123456789 -p
        query-recent-match John --parse
      messages:
        querying_match: Searching for match details, please wait...
        query_failed: Failed to get the player's recent match.
        is_anonymous: |-
          Your player data is not public, and recent match data cannot be obtained.
          If you need to make data public, please set it to public in the DOTA2 game settings.
    query-player:
      description: Query the player's personal information, optionally specify a hero.
      options:
        hero: Query the player's usage of the specified hero (same as querying a hero, can use nickname or ID)
      usage: |-
        Query the personal information of the specified player and generate a picture, optionally specify a hero.
        The parameter can be the player's SteamID or the nickname of a player bound in this group. If no parameter is provided, it will try to query the SteamID of the command caller.
      examples: |-
        query-player
        query-player 123456789
        query-player John
        query-player John --hero Anti-Mage
        query-player John -o Anti-Mage
      messages:
        querying_player: Retrieving player data, please wait...
        query_failed: Failed to get player information.
    query-hero:
      description: Query hero skills/stats information.
      options:
        random: Randomly select a hero.
      usage: |-
        Query the hero's skill descriptions and various stats, generate a picture.
        The parameter can be the hero's ID, name, or common nickname.
      examples: |-
        query-hero 15
        query-hero Razor
        query-hero -r
      messages:
        not_found: Hero not found, please confirm and re-enter.
        querying_hero: Retrieving hero data, please wait...
        query_failed: Failed to get hero data.
        empty_input: Please enter a parameter.
    query-item:
      description: Query item information
      usage: |-
        Query item descriptions and attributes, then generate and publish an image report.
        Parameters can be item name (supports fuzzy search), item alias, or item ID.
        You can set the maximum number of items to send per query on the configuration page, as well as whether to send the item list when the limit is exceeded or parameters are not entered.
      examples: |-
        query-item Vanguard
      messages:
        query_list_failed: Failed to retrieve item list data
        query_item_failed: Failed to retrieve data for item '{0}'
        querying_item: Querying item data, please wait...
        cache_building: Initializing or rebuilding item cache for the current version, please wait...
        empty_input: |-
          No keywords provided. 
          {#if show}Displaying full item list per current configuration
          {:else}No content available
          {/if}
        not_found: No items found matching the keywords, please verify and retry
        too_many_items: |-
          Found {count} items, exceeding maximum display limit ({max} items)
          {#if show}(Displaying item list){/if}
        finded_items: |-
          Matching items: 
          {#each items as item}
          {item.name_loc}{#if item !== items[items.length - 1]}, {/if}
          {/each}
    hero-of-the-day:
      description: Get hero recommendations for the day.
      usage: |-
        Fetches recent and lifetime match history to recommend heroes based on parameters like wins, performance score, and hot streaks.
        The parameter can be a player's SteamID or the nickname of a player bound in this group. If no parameter is provided, it will try to look up the command caller's SteamID.
      options:
        days: -d <number> The range of recent days to consider, default is 30.
      examples: |-
        hero-of-the-day
        hero-of-the-day -d 60
        hero-of-the-day 1234567890
        hero-of-the-day "John Doe"
      messages:
        title_recommendation: "Today's Recommendation:"
        recommendation_intro: "The recommended heroes for you today are:"
        recommendation_heroes: "{#each heroes as hero}{hero}{#if hero !== heroes[heroes.length - 1]}, {/if}{/each}"
        recommendation_type_lifetime_only: "Your recent match history is empty. This recommendation is based on your lifetime statistics."
        recommendation_type_no_record: "Cannot provide recommendations due to insufficient recent and lifetime data."
        details:
          pool_description: "The recommendation is generated by scoring your recent and lifetime hero performance, sorting by total score, and then randomly selecting from the top 10 heroes weighted by their scores."
          table_intro: "Below is the detailed score breakdown for the top 10 heroes."
          table_headers:
            hero: "Hero"
            recent_wins: "Recent Wins Score"
            lifetime_wins: "Lifetime Wins<br>(Logarithmic)"
            imp_bonus: "IMP Bonus"
            is_hot_streak: "Hot Streak"
            total_score: "Total Score"
          scoring_formula: "Current Scoring Formula: [Recent Wins x 1] + [log(Lifetime Wins + 1) x 5] + [Recent IMP x 0.1]"
          hot_streak_desc: "If a hero was played in the last 3 days, it's considered a 'Hot Streak' hero, receiving a 20% bonus to its total score."
        title_meta: "Meta Trends:"
        meta_intro: "Top 3 advantage heroes for each position with a <b>pick rate ≥2%</b> within ±1 of your rank bracket ({tiers}) over the last week, sorted by win rate:"
        meta_table_header: "Hero (Pick% Win%)"
        meta_position: "Pos {pos}:"
    common:
      messages:
        user_not_binded_in_channel: |-
          By default, it tries to find your information from the bound SteamID players, but it seems you are not bound.
          Please bind your SteamID in this group. (You can enter [bind -h] for help)
          Or follow the command with the SteamID or nickname of the player you want to query.
        user_not_in_group: |-
          Command failed.
          Currently not in a group chat, you must provide the specified player's SteamID.
        invalid_input_include_steam_id: Invalid SteamID and the player was not found in this group by the given input.
    help:
      description: "Get the link to the detailed online documentation for the plugin."
      messages:
        content: |-
          For a detailed guide on DOTA2Tracker features, command usage, and algorithm explanations, please visit the online documentation:
          https://sjtdev.github.io/koishi-plugin-dota2tracker/en-US/
